name: livealone-test

on:
  push:
    branches: [ develop, feat/*, feat/** ]
  pull_request:
    branches:
      - develop

env:
  DOCKER_IMAGE_TAG_NAME: livealone

jobs:
  build-and-docker-push:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17 with OpenJDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Get Env
        run: |
          touch ./.env.production
          echo "${{ secrets.PRODUCTION_ENV }}" > ./.env.production
        shell: bash

      - name: Build with Gradle
        run: ./gradlew clean build --exclude-task test -i

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest

  deploy-to-ec2:
    needs: build-and-docker-push
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create PEM file
        run: |
          echo "${{ secrets.EC2_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Verify SSH connectivity
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'echo "SSH connection successful"'
          if [ $? -ne 0 ]; then
            echo "SSH connection failed"
            exit 1
          fi

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: private_key.pem
          script: |
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest
            sudo docker run -d -p 8080:8080 \
                -e ACCESS_KEY=${{ secrets.ACCESS_KEY }} \
                -e BUCKET_NAME=${{ secrets.BUCKET_NAME }} \
                -e CRON=${{ secrets.CRON }} \
                -e DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }} \
                -e DATASOURCE_URL=${{ secrets.DATASOURCE_URL }} \
                -e DATASOURCE_USERNAME=${{ secrets.DATASOURCE_USERNAME }} \
                -e EMAIL_ID=${{ secrets.EMAIL_ID }} \
                -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
                -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
                -e REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
                -e REDIS_PORT=${{ secrets.REDIS_PORT }} \
                -e REGION=${{ secrets.REGION }} \
                -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
                -e SERVER_PORT=${{ secrets.SERVER_PORT }} \
                ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest