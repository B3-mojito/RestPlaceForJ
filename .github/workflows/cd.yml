name: develop ci/cd

on:

  pull_request:
    branches:
      - develop
#    types:
#      - closed  # PR이 닫힐 때만 워크플로우가 실행됨

env:
  DOCKER_IMAGE_TAG_NAME: livealone
  PRODUCTION_ENV: ${{ secrets.PRODUCTION_ENV }}
  ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
  BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
  CRON: ${{ secrets.CRON }}
  DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
  DATASOURCE_URL: ${{ secrets.DATASOURCE_URL }}
  DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
  EMAIL_ID: ${{ secrets.EMAIL_ID }}
  JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
  REDIS_HOST: ${{ secrets.REDIS_HOST }}
  REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
  REDIS_PORT: ${{ secrets.REDIS_PORT }}
  REGION: ${{ secrets.REGION }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  SERVER_PORT: ${{ secrets.SERVER_PORT }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  KAKAO_KEY: ${{ secrets.KAKAO_KEY}}


jobs:
  build-and-docker-push:
    runs-on: ubuntu-22.04
    #    if: github.event.pull_request.merged == true  # PR이 병합된 경우에만 작업 실행

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up JDK 17 with OpenJDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Get production environment variables
        run: |
          touch ./.env.production
          echo "${{ secrets.PRODUCTION_ENV }}" > ./.env.production
        shell: bash

      - name: Build with Gradle
        run: ./gradlew clean build --exclude-task test -i

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest
      - name: gradlew test
        run: ./gradlew test

  deploy-to-ec2:
    needs: build-and-docker-push
    runs-on: ubuntu-22.04

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          envs: PRODUCTION_ENV, DOCKER_IMAGE_TAG_NAME, DOCKERHUB_USERNAME, ACCESS_KEY, BUCKET_NAME, CRON, DATASOURCE_PASSWORD, DATASOURCE_URL, DATASOURCE_USERNAME, EMAIL_ID, JWT_SECRET_KEY, REDIS_HOST, REDIS_PASSWORD, REDIS_PORT, REGION, SECRET_KEY, SERVER_PORT, KAKAO_KEY
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")
            if [ -n "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi
            sudo docker pull ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_TAG_NAME}:latest
            sudo docker run -d -p 8080:8080 \
              -e ACCESS_KEY=${ACCESS_KEY}  \
              -e BUCKET_NAME=${BUCKET_NAME}  \
              -e CRON="${CRON}"  \
              -e DATASOURCE_PASSWORD=${DATASOURCE_PASSWORD}  \
              -e DATASOURCE_URL=${DATASOURCE_URL}  \
              -e DATASOURCE_USERNAME=${DATASOURCE_USERNAME}  \
              -e EMAIL_ID=${EMAIL_ID}  \
              -e JWT_SECRET_KEY=${JWT_SECRET_KEY}  \
              -e REDIS_HOST=${REDIS_HOST}  \
              -e REDIS_PASSWORD=${REDIS_PASSWORD}  \
              -e REDIS_PORT=${REDIS_PORT}  \
              -e REGION=${REGION}  \
              -e SECRET_KEY=${SECRET_KEY}  \
              -e SERVER_PORT=${SERVER_PORT}  \
              -e KAKAO_KEY=${KAKAO_KEY}  \
              ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_TAG_NAME}:latest
